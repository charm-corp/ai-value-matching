#!/usr/bin/env node\n\n/**\n * RLS + Backend Integration Test\n * 우리의 새로운 RLS 시스템이 올바르게 통합되었는지 테스트\n */\n\nconst path = require('path');\nrequire('dotenv').config();\n\n// 테스트 환경 설정\nprocess.env.NODE_ENV = 'test';\nprocess.env.MONGODB_URI = 'mongodb://localhost:27017/charm-inyeon-test';\nprocess.env.PORT = '3001';\n\nconsole.log('🧪 RLS + Backend Integration Test Starting...');\nconsole.log('=' .repeat(50));\n\n// 1. 기본 의존성 테스트\nconsole.log('1️⃣ Testing basic dependencies...');\ntry {\n  const mongoose = require('mongoose');\n  const express = require('express');\n  console.log('✅ Core dependencies loaded');\n} catch (error) {\n  console.error('❌ Core dependency error:', error.message);\n  process.exit(1);\n}\n\n// 2. 새로운 RLS 시스템 의존성 테스트\nconsole.log('\\n2️⃣ Testing RLS system dependencies...');\ntry {\n  const { integrateRLSSystem } = require('./middleware/rlsIntegration');\n  const { getCacheService } = require('./services/cacheService');\n  const { getPerformanceService } = require('./services/performanceService');\n  const { getHealthCheckService } = require('./monitoring/healthCheck');\n  console.log('✅ RLS system dependencies loaded');\n} catch (error) {\n  console.error('❌ RLS dependency error:', error.message);\n  console.log('📝 Error details:', error.stack);\n}\n\n// 3. 서비스 초기화 테스트\nconsole.log('\\n3️⃣ Testing service initialization...');\ntry {\n  const { getCacheService } = require('./services/cacheService');\n  const cacheService = getCacheService();\n  console.log('✅ Cache service initialized');\n  \n  const { getPerformanceService } = require('./services/performanceService');\n  const perfService = getPerformanceService();\n  console.log('✅ Performance service initialized');\n  \n  const { getHealthCheckService } = require('./monitoring/healthCheck');\n  const healthService = getHealthCheckService();\n  console.log('✅ Health check service initialized');\n} catch (error) {\n  console.error('❌ Service initialization error:', error.message);\n}\n\n// 4. Express 앱 생성 및 RLS 통합 테스트\nconsole.log('\\n4️⃣ Testing Express app with RLS integration...');\ntry {\n  const express = require('express');\n  const { integrateRLSSystem, createCompatibilityMiddleware } = require('./middleware/rlsIntegration');\n  \n  const testApp = express();\n  \n  // 기본 미들웨어\n  testApp.use(express.json());\n  testApp.use(createCompatibilityMiddleware());\n  \n  // 테스트 라우트\n  testApp.get('/test', (req, res) => {\n    res.json({\n      success: true,\n      message: 'RLS integration test successful',\n      rlsContext: req.rlsContext ? 'present' : 'not present',\n      timestamp: new Date().toISOString()\n    });\n  });\n  \n  console.log('✅ Express app with RLS compatibility created');\n  \n  // RLS 시스템 통합 테스트\n  integrateRLSSystem(testApp)\n    .then(success => {\n      if (success) {\n        console.log('✅ RLS system integration successful');\n        \n        // 테스트 서버 시작\n        const server = testApp.listen(3001, () => {\n          console.log('✅ Test server started on port 3001');\n          \n          // 간단한 HTTP 요청 테스트\n          const http = require('http');\n          const options = {\n            hostname: 'localhost',\n            port: 3001,\n            path: '/test',\n            method: 'GET'\n          };\n          \n          const req = http.request(options, (res) => {\n            let data = '';\n            res.on('data', (chunk) => {\n              data += chunk;\n            });\n            res.on('end', () => {\n              try {\n                const response = JSON.parse(data);\n                console.log('✅ HTTP test successful:', response.message);\n                console.log('\\n🎉 ALL TESTS PASSED!');\n                console.log('📊 Integration Summary:');\n                console.log('   - Core dependencies: ✅');\n                console.log('   - RLS dependencies: ✅');\n                console.log('   - Service initialization: ✅');\n                console.log('   - Express integration: ✅');\n                console.log('   - HTTP endpoint: ✅');\n                \n                server.close();\n                process.exit(0);\n              } catch (error) {\n                console.error('❌ HTTP response parsing error:', error.message);\n                server.close();\n                process.exit(1);\n              }\n            });\n          });\n          \n          req.on('error', (error) => {\n            console.error('❌ HTTP request error:', error.message);\n            server.close();\n            process.exit(1);\n          });\n          \n          req.end();\n        });\n        \n        // 타임아웃 설정 (30초)\n        setTimeout(() => {\n          console.log('⏰ Test timeout reached');\n          server.close();\n          process.exit(0);\n        }, 30000);\n        \n      } else {\n        console.warn('⚠️ RLS system integration had issues');\n        process.exit(1);\n      }\n    })\n    .catch(error => {\n      console.error('❌ RLS integration error:', error.message);\n      process.exit(1);\n    });\n  \n} catch (error) {\n  console.error('❌ Express app creation error:', error.message);\n  console.log('📝 Error stack:', error.stack);\n  process.exit(1);\n}\n\n// 예외 처리\nprocess.on('uncaughtException', (error) => {\n  console.error('❌ Uncaught exception:', error.message);\n  process.exit(1);\n});\n\nprocess.on('unhandledRejection', (reason, promise) => {\n  console.error('❌ Unhandled rejection:', reason);\n  process.exit(1);\n});"